/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef user_profile_TYPES_H
#define user_profile_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Task1 {

typedef std::vector<class UserProfile>  listUser;

typedef std::map<int32_t, class UserProfile>  Users;

typedef int32_t idcounter;

typedef struct _UserProfile__isset {
  _UserProfile__isset() : uid(false), name(false), age(false), gender(false) {}
  bool uid;
  bool name;
  bool age;
  bool gender;
} _UserProfile__isset;

class UserProfile {
 public:

  static const char* ascii_fingerprint; // = "2DDB838D45F9DEA369C92468CA285C4D";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0xDB,0x83,0x8D,0x45,0xF9,0xDE,0xA3,0x69,0xC9,0x24,0x68,0xCA,0x28,0x5C,0x4D};

  UserProfile() : uid(0), name(), age(0), gender(0) {
  }

  virtual ~UserProfile() throw() {}

  int32_t uid;
  std::string name;
  int16_t age;
  int16_t gender;

  _UserProfile__isset __isset;

  void __set_uid(const int32_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_age(const int16_t val) {
    age = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  bool operator == (const UserProfile & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(age == rhs.age))
      return false;
    if (!(gender == rhs.gender))
      return false;
    return true;
  }
  bool operator != (const UserProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserProfile &a, UserProfile &b);

} // namespace

#endif
