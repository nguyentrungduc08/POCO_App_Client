/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserStorage_H
#define UserStorage_H

#include <thrift/TDispatchProcessor.h>
#include "user_profile_types.h"

namespace Task1 {

class UserStorageIf {
 public:
  virtual ~UserStorageIf() {}
  virtual int32_t createUser(const UserProfile& user) = 0;
  virtual void getUser(UserProfile& _return, const int32_t uid) = 0;
  virtual int32_t editUser(const int32_t uid, const UserProfile& user) = 0;
};

class UserStorageIfFactory {
 public:
  typedef UserStorageIf Handler;

  virtual ~UserStorageIfFactory() {}

  virtual UserStorageIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserStorageIf* /* handler */) = 0;
};

class UserStorageIfSingletonFactory : virtual public UserStorageIfFactory {
 public:
  UserStorageIfSingletonFactory(const boost::shared_ptr<UserStorageIf>& iface) : iface_(iface) {}
  virtual ~UserStorageIfSingletonFactory() {}

  virtual UserStorageIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserStorageIf* /* handler */) {}

 protected:
  boost::shared_ptr<UserStorageIf> iface_;
};

class UserStorageNull : virtual public UserStorageIf {
 public:
  virtual ~UserStorageNull() {}
  int32_t createUser(const UserProfile& /* user */) {
    int32_t _return = 0;
    return _return;
  }
  void getUser(UserProfile& /* _return */, const int32_t /* uid */) {
    return;
  }
  int32_t editUser(const int32_t /* uid */, const UserProfile& /* user */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _UserStorage_createUser_args__isset {
  _UserStorage_createUser_args__isset() : user(false) {}
  bool user;
} _UserStorage_createUser_args__isset;

class UserStorage_createUser_args {
 public:

  UserStorage_createUser_args() {
  }

  virtual ~UserStorage_createUser_args() throw() {}

  UserProfile user;

  _UserStorage_createUser_args__isset __isset;

  void __set_user(const UserProfile& val) {
    user = val;
  }

  bool operator == (const UserStorage_createUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const UserStorage_createUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserStorage_createUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserStorage_createUser_pargs {
 public:


  virtual ~UserStorage_createUser_pargs() throw() {}

  const UserProfile* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserStorage_createUser_result__isset {
  _UserStorage_createUser_result__isset() : success(false) {}
  bool success;
} _UserStorage_createUser_result__isset;

class UserStorage_createUser_result {
 public:

  UserStorage_createUser_result() : success(0) {
  }

  virtual ~UserStorage_createUser_result() throw() {}

  int32_t success;

  _UserStorage_createUser_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const UserStorage_createUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserStorage_createUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserStorage_createUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserStorage_createUser_presult__isset {
  _UserStorage_createUser_presult__isset() : success(false) {}
  bool success;
} _UserStorage_createUser_presult__isset;

class UserStorage_createUser_presult {
 public:


  virtual ~UserStorage_createUser_presult() throw() {}

  int32_t* success;

  _UserStorage_createUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserStorage_getUser_args__isset {
  _UserStorage_getUser_args__isset() : uid(false) {}
  bool uid;
} _UserStorage_getUser_args__isset;

class UserStorage_getUser_args {
 public:

  UserStorage_getUser_args() : uid(0) {
  }

  virtual ~UserStorage_getUser_args() throw() {}

  int32_t uid;

  _UserStorage_getUser_args__isset __isset;

  void __set_uid(const int32_t val) {
    uid = val;
  }

  bool operator == (const UserStorage_getUser_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const UserStorage_getUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserStorage_getUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserStorage_getUser_pargs {
 public:


  virtual ~UserStorage_getUser_pargs() throw() {}

  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserStorage_getUser_result__isset {
  _UserStorage_getUser_result__isset() : success(false) {}
  bool success;
} _UserStorage_getUser_result__isset;

class UserStorage_getUser_result {
 public:

  UserStorage_getUser_result() {
  }

  virtual ~UserStorage_getUser_result() throw() {}

  UserProfile success;

  _UserStorage_getUser_result__isset __isset;

  void __set_success(const UserProfile& val) {
    success = val;
  }

  bool operator == (const UserStorage_getUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserStorage_getUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserStorage_getUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserStorage_getUser_presult__isset {
  _UserStorage_getUser_presult__isset() : success(false) {}
  bool success;
} _UserStorage_getUser_presult__isset;

class UserStorage_getUser_presult {
 public:


  virtual ~UserStorage_getUser_presult() throw() {}

  UserProfile* success;

  _UserStorage_getUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserStorage_editUser_args__isset {
  _UserStorage_editUser_args__isset() : uid(false), user(false) {}
  bool uid;
  bool user;
} _UserStorage_editUser_args__isset;

class UserStorage_editUser_args {
 public:

  UserStorage_editUser_args() : uid(0) {
  }

  virtual ~UserStorage_editUser_args() throw() {}

  int32_t uid;
  UserProfile user;

  _UserStorage_editUser_args__isset __isset;

  void __set_uid(const int32_t val) {
    uid = val;
  }

  void __set_user(const UserProfile& val) {
    user = val;
  }

  bool operator == (const UserStorage_editUser_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const UserStorage_editUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserStorage_editUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserStorage_editUser_pargs {
 public:


  virtual ~UserStorage_editUser_pargs() throw() {}

  const int32_t* uid;
  const UserProfile* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserStorage_editUser_result__isset {
  _UserStorage_editUser_result__isset() : success(false) {}
  bool success;
} _UserStorage_editUser_result__isset;

class UserStorage_editUser_result {
 public:

  UserStorage_editUser_result() : success(0) {
  }

  virtual ~UserStorage_editUser_result() throw() {}

  int32_t success;

  _UserStorage_editUser_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const UserStorage_editUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserStorage_editUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserStorage_editUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserStorage_editUser_presult__isset {
  _UserStorage_editUser_presult__isset() : success(false) {}
  bool success;
} _UserStorage_editUser_presult__isset;

class UserStorage_editUser_presult {
 public:


  virtual ~UserStorage_editUser_presult() throw() {}

  int32_t* success;

  _UserStorage_editUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserStorageClient : virtual public UserStorageIf {
 public:
  UserStorageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  UserStorageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t createUser(const UserProfile& user);
  void send_createUser(const UserProfile& user);
  int32_t recv_createUser();
  void getUser(UserProfile& _return, const int32_t uid);
  void send_getUser(const int32_t uid);
  void recv_getUser(UserProfile& _return);
  int32_t editUser(const int32_t uid, const UserProfile& user);
  void send_editUser(const int32_t uid, const UserProfile& user);
  int32_t recv_editUser();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserStorageProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UserStorageIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserStorageProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_editUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserStorageProcessor(boost::shared_ptr<UserStorageIf> iface) :
    iface_(iface) {
    processMap_["createUser"] = &UserStorageProcessor::process_createUser;
    processMap_["getUser"] = &UserStorageProcessor::process_getUser;
    processMap_["editUser"] = &UserStorageProcessor::process_editUser;
  }

  virtual ~UserStorageProcessor() {}
};

class UserStorageProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserStorageProcessorFactory(const ::boost::shared_ptr< UserStorageIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UserStorageIfFactory > handlerFactory_;
};

class UserStorageMultiface : virtual public UserStorageIf {
 public:
  UserStorageMultiface(std::vector<boost::shared_ptr<UserStorageIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserStorageMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserStorageIf> > ifaces_;
  UserStorageMultiface() {}
  void add(boost::shared_ptr<UserStorageIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t createUser(const UserProfile& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createUser(user);
    }
    return ifaces_[i]->createUser(user);
  }

  void getUser(UserProfile& _return, const int32_t uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUser(_return, uid);
    }
    ifaces_[i]->getUser(_return, uid);
    return;
  }

  int32_t editUser(const int32_t uid, const UserProfile& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->editUser(uid, user);
    }
    return ifaces_[i]->editUser(uid, user);
  }

};

} // namespace

#endif
